{"version":3,"sources":["App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["getByteLength","str","Blob","size","OutputRow","props","state","copied","handleCopy","bind","navigator","clipboard","writeText","this","message","setState","className","value","readOnly","onClick","part","React","Component","App","submitClicked","paginatedMessages","handleChange","handleSubmit","e","currentTarget","preventDefault","maxLength","length","words","split","messages","join","currentMessage","filter","w","forEach","word","push","map","m","replace","match","messageNumber","paginateText","onSubmit","onChange","onFocus","autoComplete","autoFocus","placeholder","spellCheck","type","i","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.3785763c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n/**\n * Get the byte length of a string, which can be greater in\n * some cases than the `.length` property of a JavaScript sting.\n * Some text messaging systems, like Garmin InReach, count\n * bytes to check the maximum length of a message, so use this\n * more conservative measure.\n * https://stackoverflow.com/questions/25994001/how-to-calculate-byte-length-containing-utf8-characters-using-javascript\n */\nconst getByteLength = (str: string): number =>\n  new Blob([str]).size\n\n/**\n * Convert a message into chunks that are small enough to send\n * (ie, chunks that are small enough to fit within `maxLength`).\n * If there are multiple chunks, indicate the number of the\n * chunk and the total count of chunks at the start of each\n * chunk.\n * \n * @param message\n * @param maxLength defaults to 160, the length of an SMS\n * @returns an array of chunks, ready to be sent\n */\nconst paginateText = (message: string, maxLength: number = 160): string[] => {\n  // TO DO:\n  // const maxLengthIfPaginated = maxLength - '[11/99] '.length\n  // assert max([len(i) for i in words]) < max_length_if_paginated, \"Message contains a word/string that is too long and cannot be split\"\n\n  if (message.length === 0) {\n    return []\n  }\n\n  const words = message.split(/\\s+/)\n\n  let messages: string[] = []\n  if (getByteLength(message) <= maxLength) {\n    messages = [words.join(' ')]\n  } else {\n    let currentMessage = '[1/XX]'\n    words\n      .filter(w => w.length > 0)\n      .forEach(word => {\n        if (getByteLength(currentMessage) + ' '.length + getByteLength(word) > maxLength) {\n          messages.push(currentMessage)\n          currentMessage = `[${messages.length + 1}/XX]`\n        }\n        currentMessage = [currentMessage, word].join(' ')\n      })\n    messages.push(currentMessage)\n\n    messages = messages.map(\n      (m: string): string => m.replace(\n        /^\\[(\\d{1,2})\\/XX\\] /,\n        (match, messageNumber) => `[${messageNumber}/${messages.length}] `\n      )\n    )\n  }\n\n  return messages\n}\n\ntype OutputRowProps = {\n  message: string;\n  part: number;\n}\n\ntype OutputRowState = {\n  copied: boolean\n}\n\nclass OutputRow extends React.Component<OutputRowProps, OutputRowState> {\n  constructor(props: any) {\n    super(props)\n    this.state = {copied: false}\n\n    this.handleCopy = this.handleCopy.bind(this)\n  }\n\n  handleCopy() {\n    navigator.clipboard.writeText(this.props.message)\n    this.setState({copied: true})\n  }\n\n  render() {\n    return (\n      <div className={`OutputRow ${this.state.copied ? 'OutputRow-copied' : ''}`}>\n        <textarea\n          value={this.props.message}\n          readOnly\n          className=\"OutputRow-message\"\n        ></textarea>\n        <button\n          className=\"OutputRow-copy\"\n          onClick={this.handleCopy}\n        >Copy Part {this.props.part}</button>\n      </div>\n    )\n  }\n}\n\ntype AppState = {\n  message: string;\n  submitClicked: boolean;\n  paginatedMessages: string[];\n}\n\nclass App extends React.Component<{}, AppState> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      message: '',\n      submitClicked: false,\n      paginatedMessages: []\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  handleChange(e: React.ChangeEvent<HTMLTextAreaElement> | React.FocusEvent<HTMLTextAreaElement>) {\n    const message = e.currentTarget.value\n    this.setState({\n      submitClicked: false,\n      message\n    })\n  }\n\n  handleSubmit(e: React.FormEvent) {\n    e.preventDefault()\n\n    // Since this site is built primarily for Garmin InReach\n    // messaging, use 12 fewer characters than the usual 160,\n    // since Gamin sometimes reserves 12 characters at the end\n    // of each message\n    const garminMessageMaxLength = 160 - 12\n    const paginatedMessages = paginateText(\n      this.state.message,\n      garminMessageMaxLength\n    )\n    this.setState({\n      submitClicked: this.state.message.length > 0,\n      paginatedMessages\n    })\n  }\n\n  render() {\n    return(\n      <div className=\"App\">\n        <div className={`Input ${this.state.submitClicked ? \"Input-submitted\" : ''}`}>\n          <span className=\"Input-header\">Step 1: Enter text to be paginated:</span>\n          <form onSubmit={this.handleSubmit}>\n            <div>\n              <textarea\n                value={this.state.message}\n                onChange={this.handleChange}\n                onFocus={this.handleChange}\n                className=\"Input-message\"\n                autoComplete=\"off\"\n                autoFocus={true}\n                placeholder=\"The message typed in here will be split into parts short enough for an SMS\"\n                spellCheck=\"false\"\n              ></textarea>\n            </div>\n\n            <input type=\"submit\" value=\"Paginate Message\"></input>\n          </form>\n        </div>\n\n        {\n          this.state.submitClicked\n            ? <div className=\"Output\">\n              <span className=\"Output-header\">Step 2: Copy and send each part:</span>\n\n              {\n                this.state.paginatedMessages.map((m, i) =>\n                  <OutputRow message={m} part={i + 1} key={i} />\n                )\n              }\n            </div>\n            : ''\n        }\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}